test.lrna1 <- dat_lrna1[-strat_index,]
ggplot(data = train.lrna1,aes(x = arm)) + geom_bar()
ggplot(data = test.lrna1,aes(x = arm)) + geom_bar()
##################################################################################
##################################################################################
#creat 5 folds for cv
num_cv_folds = 5
set.seed(seed)
cv_split_lrna1 <- vfold_cv(train.lrna1, v=num_cv_folds,strata = y)
cv_data_lrna1 <- cv_split_lrna1 %>%
mutate(
# Extract the train dataframe for each split
train = map(splits, ~training(.x)),
# Extract the validate dataframe for each split
validate = map(splits, ~testing(.x))
)  %>%
mutate(
#N-train of train set
n_train = map_dbl(train, nrow),
#N-validate of validate set
n_validate = map_dbl(validate, nrow)
)
##################################################################################
##################################################################################
#RANDOM FORREST WITH RANGER PACKAGE
library(ranger)
# Prepare for tuning the cross validation folds BY mtry, nodesize and sampsize
#mtry_min <- 1
#mtry_max <- floor(sqrt((ncol(train.lrna1)-1)))
mtry <- 1
nodesize <- seq(2,10,2)
numtree <- seq(300,800,100)
# Create a data frame containing all combinations
hyper_grid <- expand.grid(mtry = mtry, nodesize = nodesize, numtree = numtree)
#CROSS THE ELEMENT OF HYPER GRID
cv_tune_lrna1 <- cv_data_lrna1 %>%
crossing( mtry = hyper_grid$mtry,nodesize = hyper_grid$nodesize, numtree = hyper_grid$numtree)
cv_model_lrna1 <- cv_tune_lrna1 %>%
mutate(.l = as.list(data.frame(t(cbind(mtry,nodesize,numtree))))) %>%
mutate(model = map2(.x = train, .y = .l,~ ranger(formula = y~.,
data = .x,
mtry = .y[1],
num.trees = .y[3],
min.node.size = .y[2],
seed = seed,
oob.error = FALSE,
importance = 'impurity',
classification = FALSE,
replace = TRUE,
verbose = TRUE )))
cv_model_lrna1 <- cv_model_lrna1 %>%
mutate(validate_predicted = map2(.x = model, .y = validate, ~predict(.x, .y)$predictions),
validate_actual = map(validate, ~ .x$y))  %>%
# Calculate validate accuracy for each fold and mtry combination
mutate(error = map2_dbl(.x = validate_actual, .y = validate_predicted, ~sqrt(sum((.x-.y)^2))))
cv_eval_lrna1 <- cv_model_lrna1 %>%
group_by(numtree,mtry,nodesize) %>%
summarise(mean_error = mean(error)) %>%
ungroup(mtry,nodesize,numtree)
ggplot(data = cv_eval_lrna1, aes(x=nodesize,y = train_error)) + geom_line() +
facet_wrap(~numtree,labeller = label_both)+
labs(title ="Mean error by nodesize", x = "nodesize", y = "Train error") +geom_smooth()
ggplot(data = cv_eval_lrna1, aes(x=nodesize,y = mean_error)) + geom_line() +
facet_wrap(~numtree,labeller = label_both)+
labs(title ="Mean error by nodesize", x = "nodesize", y = "Error") +geom_smooth()
best_mtry = cv_model_lrna1$mtry[cv_model_lrna1$error == min(cv_model_lrna1$error)]
best_nodesize = cv_model_lrna1$nodesize[cv_model_lrna1$error == min(cv_model_lrna1$error)]
best_numtree = cv_model_lrna1$numtree[cv_model_lrna1$error == min(cv_model_lrna1$error)]
min(cv_model_lrna1$error)
rffit <-  ranger(formula = y ~ .,
data = train.lrna1,
mtry = best_mtry,
num.trees = best_numtree,
min.node.size = best_nodesize,
seed = seed,
oob.error = TRUE,
importance = 'impurity',
classification = FALSE,
replace = TRUE,
verbose = TRUE )
rffit$prediction.error
rffit$r.squared
importance <- sort(rffit$variable.importance,decreasing = T)
test.lrna1 <- test.lrna1 %>% mutate(predicted_y.rf = predict(rffit, test.lrna1)$predictions)
plot(test.lrna1$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
######################################################################################
######################################################################################
# CREATE SVM REGRESSION
library(e1071)
lm1 <- lm(y ~ .,data= train.lrna1)
test.lrna1$predicted_y.lm <- predict(lm1, test.lrna1[,-1])
plot(test.lrna1$predicted_y.lm,test.lrna1$y)
abline(a = 0, b= 1)
######################################################################################
######################################################################################
error.lm <- sqrt(sum((test.lrna1$y - test.lrna1$predicted_y.lm)^2)/length(test.lrna1$y))
error.rf <- sqrt(sum((test.lrna1$y - test.lrna1$predicted_y.rf)^2)/length(test.lrna1$y))
summary(lm1)
bfit<-step(lm1,direction="backward",trace=T,k=log(dim(pdat)[1]))
bfit<-step(lm1,direction="backward",trace=T,k=log(dim(test.lrna1)[1]))
View(train.lrna1)
View(train.lrna1)
View(train.lrna1)
importance.rf <- sort(rffit$variable.importance,decreasing = T)
importance.rf
important.rf[1:5]
importance.rf[1:5]
importance.rf[1:10]
lm2 <- lm(y ~ lrna0 + pr98 + rt200 + rt234 + rt235.,data= train.lrna1)
test.lrna1$predicted_y.lm <- predict(lm2, test.lrna1[,-1])
plot(test.lrna1$predicted_y.lm,test.lrna1$y)
abline(a = 0, b= 1)
lm2 <- lm(y ~ lrna0 + pr98 + rt200 + rt234 + rt235.,data= train.lrna1)
test.lrna1$predicted_y.lm2 <- predict(lm2, test.lrna1[,-1])
lm1 <- lm(y ~ .,data= train.lrna1)
test.lrna1$predicted_y.lm <- predict(lm1, test.lrna1[,-1])
plot(test.lrna1$predicted_y.lm,test.lrna1$y)
abline(a = 0, b= 1)
lm2 <- lm(y ~ lrna0 + pr98 + rt200 + rt234 + rt235.,data= train.lrna1)
test.lrna1$predicted_y.lm2 <- predict(lm2, test.lrna1[,-1])
plot(test.lrna1$predicted_y.lm2,test.lrna1$y)
abline(a = 0, b= 1)
######################################################################################
######################################################################################
error.lm <- sqrt(sum((test.lrna1$y - test.lrna1$predicted_y.lm)^2)/length(test.lrna1$y))
error.lm2 <- sqrt(sum((test.lrna1$y - test.lrna1$predicted_y.lm2)^2)/length(test.lrna1$y))
error.rf <- sqrt(sum((test.lrna1$y - test.lrna1$predicted_y.rf)^2)/length(test.lrna1$y))
lm2 <- lm(y ~ lrna0 + pr98 + rt200 + rt234 + rt235.,data= train.lrna1)
View(test.lrna1)
View(test.lrna1)
predict.result <- data.frame()
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
ntest <- length(test.lrna1$y)
?seq
seq
predict.result <- matrix(c(1:ntest),ncol = 1, nrow = ntest)
predict.result <- data.frame(c(1:ntest))
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
View(predict.result)
predict.result <- data.frame()
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
predict.result <- NULL
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
View(predict.result)
predict.result <- data.frame(NULL)
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
predict.result <- data.frame()
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
predict.result <- data.frame(c(1:ntest))
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
predict.result <- data.frame(c(1:ntest))
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
predict.result <- data.frame(c(1:ntest))
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
View(predict.result)
test.lrna1 <- dat_lrna1[-strat_index,]
lm1 <- lm(y ~ .,data= train.lrna1)
predict.result$predicted_y.lm <- predict(lm1, test.lrna1[,-1])
View(predict.result)
predict.result <- data.frame(test.lrna1$y)
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
plot(test.lrna1$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
test.lrna1$predicted_y.rf
plot(predict.result$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
predict.result <- data.frame('y' = test.lrna1$y)
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
plot(predict.result$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
lm1 <- lm(y ~ .,data= train.lrna1)
predict.result$predicted_y.lm <- predict(lm1, test.lrna1[,-1])
plot(test.lrna1$predicted_y.lm,test.lrna1$y)
plot(predict.result$predicted_y.lm,test.lrna1$y)
abline(a = 0, b= 1)
bfit<-step(lm1,direction="backward",trace=T,k=log(dim(test.lrna1)[1]))
lm2 <- lm(y ~ lrna0 + pr98 + rt200 + rt234 + rt235.,data= train.lrna1)
lm2 <- lm(y ~ lrna0 + pr98 + rt200 + rt234 + rt235,data= train.lrna1)
predict.result$predicted_y.lm2 <- predict(lm2, test.lrna1[,-1])
plot(test.lrna1$predicted_y.lm2,test.lrna1$y)
abline(a = 0, b= 1)
######################################################################################
######################################################################################
error.lm <- sqrt(sum((predict.result$y - predict.result$predicted_y.lm)^2)/length(test.lrna1$y))
error.lm2 <- sqrt(sum((predict.result$y - predict.result$predicted_y.lm2)^2)/length(test.lrna1$y))
error.rf <- sqrt(sum((predict.result$y - predict.result$predicted_y.rf)^2)/length(test.lrna1$y))
View(predict.result)
######################################################################################
######################################################################################
# CREATE SVM REGRESSION
library(e1071)
svmfit <- svm(y ~ ., data = train.lrna1, kernel = 'linear',cost = 1000, gamma = 0.0001)
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
plot(predict.result$predicted_y.svm,test.lrna1$y)
abline(a=0, b=1)
# COMPARE WITH NON CENTER NO SCALING NO TRANSFORMATION
# Total data
data2<- data.frame(cbind(dat384,basedata))
data2 <- data2 %>% na.omit()
sum(is.na(data2))
data2 <- data2[,-zeroVar(data2)]
# DATA FOR LRNA1
# Remove the useless "id" column
unused_var <- c('patid','patid.1','lrna1','lrna2','cd41','cd42')
data_temp <- data2[, !names(data) %in% unused_var]
dat_lrna1.2 <- cbind('y' = data2$lrna1,data_temp)
#Split train and test
train.lrna1.2 <- dat_lrna1.2[strat_index,]
test.lrna1.2 <- dat_lrna1.2[-strat_index,]
lm3 <- lm(y ~ .,data= train.lrna1.2)
predict.result$predicted_y.lm3 <- predict(lm3, test.lrna1.2[,-1])
error.lm2 <- sqrt(sum((test.lrna1.2$y - predict.result$predicted_y.lm3)^2)/length(test.lrna1.2$y))
error.lm2 <- sqrt(sum((predict.result$y - predict.result$predicted_y.lm2)^2)/length(test.lrna1$y))
error.lm3 <- sqrt(sum((test.lrna1.2$y - predict.result$predicted_y.lm3)^2)/length(test.lrna1.2$y))
?ranger
rffit <-  ranger(formula = y ~ .,
data = train.lrna1,
mtry = best_mtry,
num.trees = best_numtree,
min.node.size = best_nodesize,
seed = seed,
oob.error = TRUE,
importance = 'impurity',
classification = FALSE,
replace = TRUE,
verbose = TRUE,
respect.unordered.factors = FALSE,
regularization.factor = 0.1)
rffit$prediction.error
rffit$r.squared
importance.rf <- sort(rffit$variable.importance,decreasing = T)
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
plot(predict.result$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
sqrt(sum((predict.result$y - predict.result$predicted_y.rf)^2)/length(test.lrna1$y))
error.rf <- sqrt(sum((predict.result$y - predict.result$predicted_y.rf)^2)/length(test.lrna1$y))
rffit <-  ranger(formula = y ~ .,
data = train.lrna1,
mtry = best_mtry,
num.trees = best_numtree,
min.node.size = best_nodesize,
seed = seed,
oob.error = TRUE,
importance = 'impurity',
classification = FALSE,
replace = TRUE,
verbose = TRUE,
respect.unordered.factors = FALSE,
regularization.factor = 0.5)
rffit$prediction.error
rffit$r.squared
importance.rf <- sort(rffit$variable.importance,decreasing = T)
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
plot(predict.result$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
error.rf <- sqrt(sum((predict.result$y - predict.result$predicted_y.rf)^2)/length(test.lrna1$y))
rffit <-  ranger(formula = y ~ .,
data = train.lrna1,
mtry = best_mtry,
num.trees = best_numtree,
min.node.size = best_nodesize,
seed = seed,
oob.error = TRUE,
importance = 'impurity',
classification = FALSE,
replace = TRUE,
verbose = TRUE,
respect.unordered.factors = FALSE,
regularization.factor = 2)
rffit$prediction.error
rffit$r.squared
importance.rf <- sort(rffit$variable.importance,decreasing = T)
predict.result$predicted_y.rf <- predict(rffit, test.lrna1)$predictions
plot(predict.result$predicted_y.rf,test.lrna1$y)
abline(a=0, b=1)
error.rf <- sqrt(sum((predict.result$y - predict.result$predicted_y.rf)^2)/length(test.lrna1$y))
source('HIVDATA.R')
summary(prmut0)
summary(rtmut0)
corr(rtmut0[,-1])
cor(rtmut0[,-1])
cor(rtmut0[,-1]) > 0.7
sum(cor(rtmut0[,-1]) > 0.7)
sum(cor(rtmut0[,-1]) < -0.7)
cor(rtmut0[,-1]) < -0.7
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(0.1,0.01,0.005),
degree = c(2,3,4,5,6)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
para.obj$best.parameters
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 1000,
gamma = 0.01,
degree=6)
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(0.1,0.01,0.005,0.001,0.0001),
degree = c(2,4,6,8,10)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
para.obj$best.parameters
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 1000,
gamma = para.obj$best.parameters[1],
degree=para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#1.001820238154582
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(0.1,0.01,0.005,0.001),
degree = c(2,3,4,5,6,8)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 1000,
gamma = para.obj$best.parameters[1],
degree=para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#1.001820238154582
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj$best.parameters[1]
para.obj$best.parameters[2]
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(0.1,0.01,0.005),
degree = c(2,3,4,5,6)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 1000,
gamma = para.obj$best.parameters[1],
degree=para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#1.001820238154582
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 1,
gamma = para.obj$best.parameters[1],
degree = para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#1.001820238154582
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#1.001820238154582
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 0.1,
gamma = para.obj$best.parameters[1],
degree = para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#1.001820238154582
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(0.1,0.01,0.005),
degree = c(2,3,4,5,6),
cost = c(0.05,0.1,0.5)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = para.obj$best.parameters[3],
gamma = para.obj$best.parameters[1],
degree = para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#0.965033384489204
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj$best.parameters
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(0.1,0.01,0.005),
degree = c(2,3,4,5,6)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 0.1,
gamma = para.obj$best.parameters[1],
degree = para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
#0.965033384489204
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj$best.parameters
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'radial',
cost = 0.1,
nu = 0.5,
gamma = 1,
degree = 3)
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "radial",
ranges=list (gamma = c(2,1,0.1,0.01),
degree = c(2,3,4,5,6),
nu = c(0.5,1)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
para.obj$best.parameters
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'radial',
cost = 0.1,
nu = para.obj$best.parameters[3],
gamma = para.obj$best.parameters[1],
degree = para.obj$best.parameters[2])
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
plot(predict.result$predicted_y.svm,test.lrna1$y)
abline(a=0, b=1)
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 0.1,
gamma = 0.01,
degree = 6)
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
plot(predict.result$predicted_y.svm,test.lrna1$y)
abline(a=0, b=1)
para.obj <- tune(svm, y ~.,data = train.lrna1,
kernel = "polynomial",
ranges=list (gamma = c(2,1,0.1,0.01,0.005),
degree = c(2,3,4,5,6),
cost = c(0.1,0.5)),
tunecontrol = tune.control(sampling = "cross", cross = 5,
best.model = T, performances =T))
para.obj$best.parameters
svmfit <- svm(y ~ ., data = train.lrna1,
kernel = 'polynomial',
cost = 0.1,
gamma = 0.005,
degree = 2)
predict.result$predicted_y.svm <- predict(svmfit,test.lrna1[,-1])
error.svm <- sqrt(sum((predict.result$y - predict.result$predicted_y.svm)^2)/length(test.lrna1$y))
#ggplot(data = dat384,aes(x = arm)) + geom_bar()
ggplot(data = dat384.summary,aes(x = arm, y= meanL0)) + geom_col()
# Explore the data
dat384.summary <- dat384 %>% group_by(arm) %>% summarize(meanL0=mean(lrna0),
meanL1=mean(lrna1),
meanL2=mean(lrna2),
meanC0=mean(cd40),
meanC1=mean(cd41),
meanC2=mean(cd42))
#ggplot(data = dat384,aes(x = arm)) + geom_bar()
ggplot(data = dat384.summary,aes(x = arm, y= meanL0)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanL1)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanL2)) + geom_col()
#ggplot(data = dat384.summary,aes(x = arm, y= meanC0)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanC1)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanC0)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanC2)) + geom_col()
ggplot(data=dat384,aes(x=lrna0))+geom_histogram(stat="bin",binwidth=0.1)+facet_wrap(~arm)
ggplot(data = dat384.summary,aes(x = arm, y= meanC2)) + geom_col()
#ggplot(data = dat384,aes(x = arm)) + geom_bar()
ggplot(data = dat384.summary,aes(x = arm, y= meanL0)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanL1)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanL2)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanC0)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanC1)) + geom_col()
ggplot(data = dat384.summary,aes(x = arm, y= meanC2)) + geom_col()
ggplot(data=dat384,aes(x=lrna0))+geom_histogram(stat="bin",binwidth=0.1)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=log(lrna1)))+geom_histogram(stat="bin",binwidth=0.1)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=lrna2))+geom_histogram(stat="bin",binwidth=0.1)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=cd40))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=cd41))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
###########################################################################################
# Creat total dataset for features
basedata <- merge(prmut0,rtmut0,by = "patid")
ggplot(data=dat384,aes(x=cd42))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=cd40))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=log(lrna1)))+geom_histogram(stat="bin",binwidth=0.1)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=lrna0))+geom_histogram(stat="bin",binwidth=0.3)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=log(lrna1)))+geom_histogram(stat="bin",binwidth=0.3)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=lrna2))+geom_histogram(stat="bin",binwidth=0.3)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=cd40))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=cd41))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
ggplot(data=dat384,aes(x=cd42))+geom_histogram(stat="bin",binwidth=80)+facet_wrap(~arm)
###########################################################################################
# Creat total dataset for features
basedata <- merge(prmut0,rtmut0,by = "patid")
###########################################################################################
# Total data
data<- data.frame(cbind(dat384,basedata))
sum(is.na(data))
###########################################################################################
# Total data
data<- data.frame(cbind(dat384,basedata))
data <- data %>% na.omit()
sum(is.na(data))
library(forecast)
data$lrna0 <- forecast::BoxCox( data$lrna0, BoxCox.lambda(data$lrna0))
data$lrna1 <- forecast::BoxCox( data$lrna1, BoxCox.lambda(data$lrna1))
data$lrna2 <- forecast::BoxCox( data$lrna2, BoxCox.lambda(data$lrna2))
data$cd40 <- forecast::BoxCox( data$cd40, BoxCox.lambda(data$cd40))
data$cd41 <- forecast::BoxCox( data$cd41, BoxCox.lambda(data$cd41))
data$cd42 <- forecast::BoxCox( data$cd42, BoxCox.lambda(data$cd42))
zero(data)
zeroVar(data)
length(zeroVar(data))
